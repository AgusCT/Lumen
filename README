Lumen: Lua Multitasking Environment.
====================================

"A nice generic framework to develop complex, portable concurrent applications 
in Lua." 


Extremely simple environment for coroutine based multitasking. Consists of a 
scheduler, and that's it.
Created after finding a presentation by Fabien Fleutot for the 2011 Lua 
Workshop ( see http://lua-users.org/lists/lua-l/2011-10/msg01057.html )

* Tasks can emit signals, and block waiting for them, and that's it.
	* A signal can be of any type, and carry any parameters
	* A task can wait on several signals, with a timeout.
	* Signals can be piped, this is they can be buffered to avoid signals
	  being lost on slow readers.
* A single Lua file, no C, no external dependencies. 
	* can have use for a clock (os.time() will do)
	* can have use for a idle function (busy waiting or socket.sleep will
	  do)
* Can interface with LuaSocket and nixio for socket and async file I/O support.
* Only most basic of optimizations done.
* Works with Lua 5.1, 5.2 and LuaJIT.



How tor try it out?
===================

This example recreates a slide from the above mentioned presentation:

# lua test.lua


If you want to see LuaSocket integration working, try:

# lua test-socketeer.lua


If you want to see TCP, UDP and async file I/O running, and have nixio 
installed, and in Linux, you can try (root needed as it reads from 
/dev/input/mice):

# sudo lua test-nixiorator.lua


To see how pipes work an what they are for,  try:

# lua test-pipe.lua


Contains:
=========


COPYRIGHT
	The copyright for the thing (same as Lua)

sched.lua
	The scheduler itself.

test.lua
	A sample program that uses the scheduler to do stuff.

socketeer.lua
	A task that interfaces with LuaSocket. Support TCP and UDP sockets.

test-socketeer.lua
	A test program for socketeer.

nixiorator.lua
	A task that interfaces with nixio. Supports UDP, TCP and async file 
	I/O.

test-nixiorator.lua
	A test program for nixiorator. Reads from /dev/input/mice, so run as 
	root.

speed.lua
	A test program with two tasks, one emitting signals and the other 
	accepting them. See how fast it can run.

/doc/*
	The documentation of the API for the scheduler and nixio and LuaSocket bindings.




Who?
====


Jorge Visca, jvisca@fing.edu.uy


--End
