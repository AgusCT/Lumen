Lumen: Lua Multitasking Environment.
====================================

"A nice generic framework to develop complex, portable concurrent applications 
in Lua." 


Extremely simple environment for coroutine based multitasking. Consists of a 
scheduler, and that's it.
The API was inspired by a brief description of Sierra's scheduler: 
https://github.com/SierraWireless/luasched.
Lumen has no external dependencies nor C code, and runs on unmodified Lua.

* Tasks can emit signals, and block waiting for them, and that's it.
	* A signal can be of any type, and carry any parameters
	* A task can wait on several signals, with a timeout.
	* Signals can be buffered; this helps avoid losing signals when waiting
	  signals in a loop.
* There are also named pipes, for intertask communications. 
	* Similar to signals, but writers can get blocked too (when pipe
	   gets full).
	* Synchronous and asynchronous (with a timeout) modes supported.
	* Multiple readers and writers per pipe supported. 
	* For when no signal can get lost!
* Tasks can register a name, and query for tasks by name.
	* Tasks also can wait for a given name to get registered.
* Pure Lua code, no C, no external dependencies. 
	* can have use for a clock (os.time() will do)
	* can have use for a idle function (busy waiting or socket.sleep will
	  do)
* Can interface with LuaSocket and nixio for socket and async file I/O support.
* Only most basic of optimizations done.
* Works with Lua 5.1, 5.2 and LuaJIT.

WARNING: Lumen is under heavy development, and API changes happen rather 
frequently, as other weird breakages.


How to try it out?
==================

This example has a few tasks exchanging messages, showing off basic 
functionality:

# lua test.lua


If you want to see LuaSocket integration working, try:

# lua test-socketeer.lua


If you want to see TCP, UDP and async file I/O running, and have nixio 
installed, and in Linux, you can try (root needed as it reads from 
/dev/input/mice):

# sudo lua test-nixiorator.lua


To see how buffers and pipes work and what they are for, try:

# lua test-buff.lua
# lua test-pipe.lua


Contains:
=========


COPYRIGHT
	The copyright for Lumen (same as Lua)

sched.lua
	The scheduler itself.

test.lua
	A sample program that uses the scheduler to do stuff.

socketeer.lua
	A task that interfaces with LuaSocket. Support TCP and UDP sockets.

test-socketeer.lua
	A test program for socketeer.

nixiorator.lua
	A task that interfaces with nixio. Supports UDP, TCP and async file 
	I/O.

test-nixiorator.lua
	A test program for nixiorator. Reads from /dev/input/mice, so run as 
	root.

test-buff.lua
	A demonstration of buffers.

test-pipe.lua
	A demonstration of pipes.

test-stress.lua
	A test program with two tasks, one emitting signals and the other 
	accepting them. See how fast it can run.

docs/*
	The documentation of the API for the scheduler and nixio and LuaSocket 
	bindings.




Who?
====


Jorge Visca, jvisca@fing.edu.uy


--End
